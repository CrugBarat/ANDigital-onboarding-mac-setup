#!/bin/sh

log_filename="laptop_install_report.log"

if [ -f "$HOME/$log_filename" ]
then
  echo "~/$log_filename already exists. Replace it?"
  printf "[Y/n] "
  read response
  if [ "$response" = "y" ] || [ "$response" = "Y" ]
  then
    echo "Replacing ~/$log_filename with updated install log"
    rm "$HOME/$log_filename"
    # script continues
  else
    echo "Enter a name for the log file, or enter nothing to exit without checking for unsuccessful installs"
    read chosen_filename
    if [ "$chosen_filename" = "" ]
    then
      exit
    else
      log_filename="$chosen_filename"
      # script continues
    fi
  fi
fi

log_install_success() {
  echo "âœ… $1"
  echo "âœ… $1" >> "$HOME/$log_filename"
  log_version_info $1
}

log_install_fail() {
  message="ðŸš« $1 is NOT installed!!"
  echo "$message" 1>&2
  echo "$message" >> "$HOME/$log_filename"
}

log_version_info() {
  local version_info="Version unknown"
  case "$1" in
    "git") version_info="$(git --version)" ;;
    "zsh") version_info="$(zsh --version)" ;;
    "node") version_info="$(node -v)" ;;
    "rbenv") version_info="$(rbenv -v)" ;;
    "ruby-build") version_info="$(ruby-build --version)" ;;
    "postgres") version_info="$(postgres --version)" ;;
    # java seems to print to stderr for no apparent reason. `2>&1` redirects
    # stderr to stdout to silence the CLI output and allow it to be captured in
    # the version_info variable
    "java") version_info="$(java -version 2>&1 )" ;;
    "mongod") version_info="$(mongo --version)" ;;
  esac
  version_info=$(head -n 1 <<< $version_info)
  echo "$1 version info:\n$version_info\n" >> "$HOME/$log_filename"
}

CLI_APPS=(
  "git"
  "zsh"
  "node"
  "rbenv"
  "ruby-build"
  "postgres"
  "java"
  "mongod"
  "tree"
  "pip3"
)

for cli_app_name in "${CLI_APPS[@]}"
do
  which "$cli_app_name" 2>&1>/dev/null
  if [ $? -ne 0 ]
  then
    log_install_fail "$cli_app_name"
  else
    log_install_success "$cli_app_name"
  fi
done

# Check that a rbenv version of ruby is default, not the system
which ruby | grep ".rbenv" 2>&1>/dev/null
if [ $? -ne 0 ]
then
  log_install_fail "rbenv ruby"
else
  log_install_success "rbenv ruby"
fi


is_gui_app_installed() {
  local appNameOrBundleId=$1 bundleId

  #Â convert app name to bundle ID
  bundleId=$(osascript -e "id of application \"$appNameOrBundleId\"" 2>/dev/null) || { return 1; }

  # search for location of app with given bundle ID
  osascript -e "tell application \"Finder\" to POSIX path of (get application file id \"$bundleId\" as alias)" 2>/dev/null || { return 1; }
}

GUI_APPS=(
  "google chrome"
  "slack"
  "insomnia"
  "intellij idea ce"
  "mongodb compass"
  "postico"
  "visual studio code"
  "docker"
)

for gui_app_name in "${GUI_APPS[@]}"
do
  is_gui_app_installed "$gui_app_name" 2>&1>/dev/null
  if [ $? -ne 0 ]
  then
    log_install_fail "$gui_app_name"
  else
    log_install_success "$gui_app_name"
  fi
done

which_python=$(which python3)
if [ $which_python != '/usr/local/bin/python3' ]
then
  message="ðŸš« Python path is not correct"
  echo "$message" 1>&2
  echo "$message" >> "$HOME/$log_filename"
else
  echo "âœ… Python path is correct."
  echo "âœ… Python" >> "$HOME/$log_filename"
fi
